- name: "should show help text with --help"
  args: ["--help"]
  expected_stdout_contains: "Usage:"
  exit_code: 0

- name: "should show version with --version"
  args: ["--version"]
  expected_stdout_contains: "v" # Will be checked against package.json version
  exit_code: 0

- name: "should read from stdin and output pretty json by default"
  args: ["--strategy", "regex"]
  stdin: "path is src/index.ts"
  files:
    "src/index.ts": ""
  expected_stdout: |
    [
      "src/index.ts"
    ]

- name: "should output compact json with --pretty=false"
  args: ["--pretty=false", "--strategy", "regex"]
  stdin: "path is src/index.ts"
  files:
    "src/index.ts": ""
  expected_stdout: '["src/index.ts"]'

- name: "should read from a file argument"
  args: ["input.log", "--strategy", "regex"]
  files:
    "input.log": "path in file is src/index.ts"
    "src/index.ts": ""
  expected_stdout: |
    [
      "src/index.ts"
    ]

- name: "should output yaml with --format yaml"
  args: ["--format", "yaml", "--strategy", "regex"]
  stdin: "src/app.js and src/style.css"
  files:
    "src/app.js": ""
    "src/style.css": ""
  expected_stdout: |
    - src/app.js
    - src/style.css

- name: "should output a list with --format list"
  args: ["--format", "list", "--strategy", "regex"]
  stdin: "src/app.js and src/style.css"
  files:
    "src/app.js": ""
    "src/style.css": ""
  expected_stdout: |
    src/app.js
    src/style.css

- name: "should filter out non-existing files by default"
  args: ["--format", "list", "--strategy", "regex"]
  stdin: "good: file1.txt, bad: missing.txt"
  files:
    "file1.txt": "content"
  expected_stdout: "file1.txt"

- name: "should include non-existing files with --no-verify"
  args: ["--no-verify", "--format", "list", "--strategy", "regex"]
  stdin: "good: file1.txt, bad: missing.txt"
  files:
    "file1.txt": "content"
  expected_stdout: |
    file1.txt
    missing.txt

- name: "should make paths absolute with --absolute"
  args: ["--absolute", "--format", "list", "--no-verify", "--strategy", "regex"]
  stdin: "relative/path.js"
  expected_stdout: "{{CWD}}/relative/path.js"

- name: "should use specified --cwd for absolute paths"
  args: ["--no-verify", "--absolute", "--format", "list", "--strategy", "regex", "--cwd", "{{CWD}}/fake-root"]
  stdin: "relative/path.js"
  files: # create the fake root so it's a valid directory
    "fake-root/placeholder.txt": ""
  expected_stdout: "{{CWD}}/fake-root/relative/path.js"

- name: "should work with --copy flag (output is unchanged)"
  args: ["--copy", "--format", "list", "--strategy", "regex"]
  stdin: "src/main.ts"
  files:
    "src/main.ts": ""
  expected_stdout: "src/main.ts"

- name: "should handle a combination of flags"
  args: ["data.log", "--absolute", "--format", "yaml", "--strategy", "regex"]
  stdin: "" # Reading from file
  files:
    "data.log": "valid: existing.js, invalid: missing.js"
    "existing.js": "export {}"
  expected_stdout: "- {{CWD}}/existing.js"

- name: "should report error and exit 1 if input file does not exist"
  args: ["nonexistent.log"]
  expected_stderr_contains: "Error:"
  exit_code: 1

- name: "should produce empty output for no matches"
  args: ["--format", "list", "--strategy", "regex"]
  stdin: "no paths here"
  expected_stdout: ""

- name: "should handle complex paths from stdin"
  args: ["--no-verify", "--format", "list", "--strategy", "regex"]
  stdin: "url.com/path/to/file.js?v=42 and a/b/c.py#L10"
  files: {}
  expected_stdout: |
    /path/to/file.js
    a/b/c.py

- name: "should handle quoted paths with spaces from stdin"
  args: ["--no-verify", "--format", "list", "--strategy", "regex"]
  stdin: 'Found file in "path with spaces/file.txt"'
  files: {}
  expected_stdout: |
    path with spaces/file.txt

- name: "should use fuzzy strategy by default"
  args: ["--format", "list"]
  stdin: "Just a mention of cli.ts should be enough."
  files:
    "src/cli.ts": "content"
    "README.md": "content"
  expected_stdout: "src/cli.ts"

- name: "should auto-copy when piping input to a TTY-like output"
  args: ["--__INTERNAL_TEST_COPY", "--__INTERNAL_STDOUT_IS_TTY", "--format", "list", "--strategy", "regex"]
  stdin: "src/main.ts" # Piped input -> isStdinTty is false in test env
  files:
    "src/main.ts": ""
  expected_stdout: "src/main.ts"
  expected_stderr_contains: "__CLIPBOARD_COPY__:src/main.ts"

- name: "should NOT auto-copy with --no-copy even with piped input"
  args: ["--no-copy", "--__INTERNAL_TEST_COPY", "--__INTERNAL_STDOUT_IS_TTY", "--format", "list", "--strategy", "regex"]
  stdin: "src/main.ts"
  files:
    "src/main.ts": ""
  expected_stdout: "src/main.ts"

- name: "should NOT auto-copy when input is from TTY (interactive)"
  args: ["--__INTERNAL_TEST_COPY", "--__INTERNAL_STDOUT_IS_TTY", "--__INTERNAL_STDIN_IS_TTY", "--format", "list", "--strategy", "regex"]
  stdin: "src/main.ts" # Stdin is still provided to avoid hanging, but flag forces isStdinTty to true
  files:
    "src/main.ts": ""
  expected_stdout: "src/main.ts"

- name: "should force copy with --copy even when input is from TTY"
  args: ["--copy", "--__INTERNAL_TEST_COPY", "--__INTERNAL_STDOUT_IS_TTY", "--__INTERNAL_STDIN_IS_TTY", "--format", "list", "--strategy", "regex"]
  stdin: "src/main.ts"
  files:
    "src/main.ts": ""
  expected_stdout: "src/main.ts"
  expected_stderr_contains: "__CLIPBOARD_COPY__:src/main.ts"